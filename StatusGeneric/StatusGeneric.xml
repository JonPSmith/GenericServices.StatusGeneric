<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StatusGeneric</name>
    </assembly>
    <members>
        <member name="T:StatusGeneric.ErrorGeneric">
            <summary>
            This holds an error registered in the <see cref="T:StatusGeneric.IStatusGeneric"/> Errors collection
            </summary>
        </member>
        <member name="F:StatusGeneric.ErrorGeneric.HeaderSeparator">
            <summary>
            If there are multiple headers this separator is placed between them, e.g. Update>Author
            </summary>
        </member>
        <member name="M:StatusGeneric.ErrorGeneric.#ctor(System.String,System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            This ctor will create an ErrorGeneric
            </summary>
            <param name="header"></param>
            <param name="error"></param>
        </member>
        <member name="P:StatusGeneric.ErrorGeneric.Header">
            <summary>
            A Header. Can be null
            </summary>
        </member>
        <member name="P:StatusGeneric.ErrorGeneric.ErrorResult">
            <summary>
            This is the error provided
            </summary>
        </member>
        <member name="M:StatusGeneric.ErrorGeneric.ToString">
            <summary>
            A human-readable error display
            </summary>
            <returns></returns>
        </member>
        <member name="T:StatusGeneric.IStatusGeneric">
            <summary>
            This is the interface for creating and returning 
            </summary>
        </member>
        <member name="P:StatusGeneric.IStatusGeneric.Errors">
            <summary>
            This holds the list of errors. If the collection is empty, then there were no errors
            </summary>
        </member>
        <member name="P:StatusGeneric.IStatusGeneric.IsValid">
            <summary>
            This is true if there are no errors registered
            </summary>
        </member>
        <member name="P:StatusGeneric.IStatusGeneric.Message">
            <summary>
            On success this returns any message set by GenericServices, or any method that returns a status
            If there are errors it contains the message "Failed with NN errors"
            </summary>
        </member>
        <member name="P:StatusGeneric.IStatusGeneric.DebugData">
            <summary>
            This can be used to contain extra data to help the developer debug the error
            For instance, the content of an exception.
            </summary>
        </member>
        <member name="M:StatusGeneric.IStatusGeneric.CombineStatuses(StatusGeneric.IStatusGeneric)">
            <summary>
            This allows statuses to be combined
            </summary>
            <param name="status"></param>
        </member>
        <member name="M:StatusGeneric.IStatusGeneric.GetAllErrors(System.String)">
            <summary>
            This is a simple method to output all the errors as a single string - null if no errors
            Useful for feeding back all the errors in a single exception (also nice in unit testing)
            </summary>
            <param name="separator">if null then each errors is separated by Environment.NewLine, otherwise uses the separator you provide</param>
            <returns>a single string with all errors separated by the 'separator' string</returns>
        </member>
        <member name="T:StatusGeneric.IStatusGeneric`1">
            <summary>
            This is a version of <see cref="T:StatusGeneric.IStatusGeneric"/> that contains a result.
            Useful if you want to return something with the status
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:StatusGeneric.IStatusGeneric`1.Result">
            <summary>
            This contains the return result, or if there are errors it will retunr default(T)
            </summary>
        </member>
        <member name="T:StatusGeneric.StatusGenericHandler">
            <summary>
            This contains the error handling part of the GenericBizRunner
            </summary>
        </member>
        <member name="M:StatusGeneric.StatusGenericHandler.#ctor(System.String)">
            <summary>
            This creates a StatusGenericHandler, with optional header (see Header property, and CombineStatuses)
            </summary>
            <param name="header"></param>
        </member>
        <member name="P:StatusGeneric.StatusGenericHandler.Errors">
            <summary>
            This holds the list of ValidationResult errors. If the collection is empty, then there were no errors
            </summary>
        </member>
        <member name="P:StatusGeneric.StatusGenericHandler.IsValid">
            <summary>
            This is true if any errors have been reistered 
            </summary>
        </member>
        <member name="P:StatusGeneric.StatusGenericHandler.Message">
            <summary>
            On success this returns the message as set by the business logic, or the default messages set by the BizRunner
            If there are errors it contains the message "Failed with NN errors"
            </summary>
        </member>
        <member name="P:StatusGeneric.StatusGenericHandler.DebugData">
            <summary>
            This can be used to contain extra data to help the developer debug the error
            You can directly write to the DebugData
            </summary>
        </member>
        <member name="P:StatusGeneric.StatusGenericHandler.Header">
            <summary>
            The header provides a prefix to any errors you add. Useful if you want to have a general prefix to all your errors
            e.g. a header if "MyClass" would produce error messages such as "MyClass: This is my error message."
            </summary>
        </member>
        <member name="M:StatusGeneric.StatusGenericHandler.AddError(System.String,System.String[])">
            <summary>
            This adds one error to the Errors collection
            </summary>
            <param name="errorMessage">The text of the error message</param>
            <param name="propertyNames">optional. A list of property names that this error applies to</param>
        </member>
        <member name="M:StatusGeneric.StatusGenericHandler.AddValidationResult(System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            This adds one ValidationResult to the Errors collection
            </summary>
            <param name="validationResult"></param>
        </member>
        <member name="M:StatusGeneric.StatusGenericHandler.AddValidationResults(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            This appends a collection of ValidationResults to the Errors collection
            </summary>
            <param name="validationResults"></param>
        </member>
        <member name="M:StatusGeneric.StatusGenericHandler.CopyExceptionToDebugData(System.Exception)">
            <summary>
            This copies the exception Message, StackTrace and any entries in the Data dictionary into the DebugData string
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:StatusGeneric.StatusGenericHandler.CombineStatuses(StatusGeneric.IStatusGeneric)">
            <summary>
            This allows statuses to be combined. Copies over any errors and replaces the Message if the currect message is null
            If you are using Headers then it will combine the headers in any errors in combines
            e.g. Status1 with header "MyClass" combines Status2 which has header "MyProp" and status2 has errors.
            The result would be error message in status2 would be updates to start with "MyClass>MyProp: This is my error message."
            </summary>
            <param name="status"></param>
        </member>
        <member name="M:StatusGeneric.StatusGenericHandler.GetAllErrors(System.String)">
            <summary>
            This is a simple method to output all the errors as a single string - null if no errors
            Useful for feeding back all the errors in a single exception (also nice in unit testing)
            </summary>
            <param name="separator">if null then each errors is separated by Environment.NewLine, otherwise uses the separator you provide</param>
            <returns>a single string with all errors separated by the 'separator' string</returns>
        </member>
        <member name="T:StatusGeneric.StatusGenericHandler`1">
            <summary>
            This contains the error handling part of the GenericBizRunner
            </summary>
        </member>
        <member name="P:StatusGeneric.StatusGenericHandler`1.Result">
            <summary>
            This is the returned result
            </summary>
        </member>
        <member name="M:StatusGeneric.StatusGenericHandler`1.SetResult(`0)">
            <summary>
            This sets the result to be returned
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
    </members>
</doc>
